#include <SPI.h> //библиотека для работы с SPI
#include <Ethernet.h> //библиотека для работы с Ethernet
#include <Servo.h>
#include <Braccio.h>
Servo base;
Servo shoulder;
Servo elbow;
Servo wrist_rot;
Servo wrist_ver;
Servo gripper;
boolean newInfo = 0; //переменная для новой информации
byte mac[] = { 0x00, 0xAA, 0xBB, 0xCC, 0xDA, 0x02 };
//вводим mac адрес, обычно он такого вида, может отличаться
IPAddress ip(192,168,0,3);
//вводим любой IP , который не совпадает с вашим
EthernetServer server(80); //инициализация библиотеки Ethernet server library
/*---------------- 2 часть ----------------*/
void setup() {
Braccio.begin();
68
Ethernet.begin (mac, ip);//запускаем сервер с указанными ранее MAC и вашим IP
Serial.begin (9600);
server. begin();
}
/*---------------- 3 часть ----------------*/
void loop() {
EthernetClient client = server.available(); //принимаем данные, посылаемые клиентом
if (client){ //если запрос оканчивается пустой строкой
boolean currentLineIsBlank = true;
//ставим метку об окончании запроса (дословно: текущая линия чиста)
while (client.connected()) { //пока есть соединение с клиентом
if (client.available()) { //если клиент активен
char c = client.read(); //считываем посылаемую информацию в переменную "с"
if (newInfo && c == ' '){
//если переменная новой информации = 1 и "с", в которой записан запрос, равен пустой строке
newInfo = 0; //то обнуляем переменную поступления новой информации
}
if (c == '$'){
69
// если переменная "с", несущая отправленный нам запрос, содержит символ $
// "$" подразумевает разделение получаемой информации (символов)
newInfo = 1; //то пришла новая информация, ставим метку новой информации в 1
}
//Проверяем содержание URL - присутствует $1 или $2
if (newInfo == 1){ //если есть новая информация
Serial.println (c);
if (c == '1'){ //Starting position
//(step delay M1 , M2 , M3 , M4 , M5 , M6);
Braccio.ServoMovement(20, 120, 15, 150, 100, 0, 10);
//Wait 1 second
delay(1000);
Braccio.ServoMovement(20, 70, 60, 50, 0, 180, 10);
Braccio.ServoMovement(20, 70, 60, 50, 0, 180, 73);
Braccio.ServoMovement(20, 70, 105, 50, 0, 180, 73);
Braccio.ServoMovement(20, 70, 125, 50, 0, 180, 73);
Braccio.ServoMovement(20, 70, 125, 50, 0, 180, 73);
Braccio.ServoMovement(20, 150, 15, 110, 50, 0, 73);
Braccio.ServoMovement(20, 150, 15, 110, 50, 0, 10);
//Wait 1 second
70
delay(1000);
}
if (c == '2'){ //если "с" содержит 2
Braccio.ServoMovement(20, 0, 45, 180, 180, 90, 10);
//Wait 1 second
delay(1000);
delay(60000);
}
}
if (c == '\n') { //если "с" равен символу новой строки
currentLineIsBlank = true; //то начинаем новую строку
}
else if (c != '\r') {
//иначе, если "с" не равен символу возврата курсора на начало строки
currentLineIsBlank = false; //то получаем символ на текущей строке
}
if (c == '\n' && currentLineIsBlank) { //выводим HTML страницу
/*---------------- 4 часть ----------------*/
client. println ("HTTP/1.1 200 OK"); //заголовочная информация
client. println ("Content-Type: text/html");
client. println ("Connection: close");
71
client. println ("Refresh: 5"); //автоматическое обновление каждые 5 сек
client. println (); //Это не ошибка, так должно быть
client. println ("<!DOCTYPE HTML>"); //HTML тип документа
client. println ("<html>"); //открытие тега HTML
client. println ("<head> "); //открытие тега Head
client. println ("<meta http-equiv='Content-Type' content='text/html ; charset=utf-8'/> ");
client. print ("<title>Braccio Tinketkir</title>"); //название страницы
client. println ("</head>"); //заголовочная информация
client. println ("<body>");
client. print ("<H1>Добро пожаловать на TinkerKit Braccio</H1>"); //заголовк на странице
client. print ("<a href=\"/$1\"><button>Включить</button></a>"); //кнопка включить
client. print ("<a href=\"/$2\"><button2>Выключить</button2></a>");//кнопка выключить
client. println ("<>br> <br>"); //перенос на след. строчку
client. println ("<br> "); //перенос на след. строчку
client. println ("</body>");
client. println ("</html>"); //закрываем тег HTML
break; //выход
}
72
}
}
delay (1); //время на получение новых данных
client. stop(); //закрываем соединение
}
}